#define n 4

#define left fork[id]
#define right fork[(id+1) % n]

int fork[n] = -1;
int hunger[n] = 20;

inline get_fork(id) {
    atomic {
        if
            :: left < 0 && right < 0 -> 
                    left = id;
                    right = id;
            :: else
        fi
    }
}

inline eat(id) {
    }

inline philosophize(id) {
    printf("%d: philosophizing\n", id);
}


active [n] proctype philosopher() {
    int id = _pid;

    do
        :: hunger[id] >= 0 -> 
            
            if
                :: hunger[id] < 15 ->

                    get_fork(id);

                    if 
                        :: left == id && right == id ->

                            /* yum-yum */
                            printf("%d: eating\n", id);


                            atomic {
                                left = -1;
                                right = -1;
                                hunger[id] = hunger[id] + 3; 
                            }
                        :: else -> printf("%d can not eat", id);
                    fi;

                :: else -> 
                    hunger[id]--;

            fi;


        :: else ->
DEAD:       printf("%d is DEAD\n", id);
            break;
    od;

}

active proctype check()
{
    philosopher@DEAD
}
