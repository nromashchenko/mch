#define n 4

#define left fork[id]
#define right fork[(id+1) % n]

int fork[n] = -1;
int hunger[n] = 20;

inline get_fork(id) {
    atomic {
        if
            :: left < 0 && right < 0 -> 
                    left = id;
                    right = id;
            :: else
        fi
    }
}

active [n] proctype philosopher() {
    int id = _pid;

    do
        :: hunger[id] >= 0 -> 
            
            if
                :: hunger[id] < 15 ->

                    get_fork(id);

                    if 
                        :: left == id && right == id ->

                            atomic {
                                /* yum-yum */

                                printf("%d: eating: %d\n", id, hunger[id]);
                                left = -1;
                                right = -1;
                                hunger[id] = hunger[id] + 3; 
                            }

                        :: else -> 
                            printf("%d: can't", id);       
                    fi;

                :: else -> 
                    printf("%d: philosophizing\n", id);
                    hunger[id]--;

            fi;


        :: else ->
            printf("%d is DEAD\n", id);
            break;
    od;

    L:(false)

}

active proctype check()
{
    philosopher@L
}
